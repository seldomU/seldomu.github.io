<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Seldom Tools</title>
 <link href="https://seldomu.github.io//atom.xml" rel="self"/>
 <link href="https://seldomu.github.io//"/>
 <updated>2016-05-07T00:39:13+02:00</updated>
 <id>https://seldomu.github.io/</id>
 <author>
   <name>Uwe Koch</name>
   <email>seldom.indeed@gmail.com</email>
 </author>

 
 <entry>
   <title>Inspecting UI event handlers</title>
   <link href="https://seldomu.github.io//2016/02/22/uiEventInspector/"/>
   <updated>2016-02-22T00:00:00+01:00</updated>
   <id>https://seldomu.github.io//2016/02/22/uiEventInspector</id>
   <content type="html">&lt;p&gt;Unity’s UI system lets components of GameObjects register event types they want to handle. It then forwards input events to the appropriate handler components. Keeping an overview of all those components is hard with the scene hierarchy window, because it contains so many objects. The &lt;a href=&quot;https://github.com/seldomU/UIEventBackend&quot;&gt;UIEventBackend&lt;/a&gt; provides a single location for accessing all UI event handler components and their listeners. See it in action &lt;a href=&quot;https://youtu.be/8-gkwMQgb7Y&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seldomU/seldomu.github.io/master/assets/UIEventBackend.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;how-to-use-it&quot;&gt;How to use it&lt;/h3&gt;

&lt;p&gt;If you haven’t yet, install the &lt;a href=&quot;https://www.assetstore.unity3d.com/en/#!/content/54884&quot;&gt;RelationsInspector&lt;/a&gt;. Download the backend files from &lt;a href=&quot;https://github.com/seldomU/UIEventBackend&quot;&gt;GitHub&lt;/a&gt; and put them into an &lt;em&gt;Editor&lt;/em&gt; folder. Open the RelationsInspector through the Window menu, select &lt;em&gt;UIEventBackend&lt;/em&gt; from the toobar dropdown and click the &lt;code class=&quot;highlighter-rouge&quot;&gt;Show all scene events&lt;/code&gt; button, to see all UI event handler components of the loaded scene.&lt;/p&gt;

&lt;p&gt;The scene node is connected to all handler components, and those are connected to their listeners. By hovering over an arrow you can see what event a listener subscribes to. Hovering over a listener node shows details about the target object, the called method and the passed argument. Through the listener node’s context menu you can open the method’s source file, if it is available.&lt;/p&gt;

&lt;p&gt;By dragging GameObjects into the window, you get only handlers that are children of those GameObjects.
Through the backend toolbar you can choose how node selection should be handled:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Select GameObject&lt;/em&gt; will select the GameObject of the handler or listener in all other Unity windows&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Select component&lt;/em&gt; will select the component of the handler or listener in all other Unity windows (nice for event editing)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;None&lt;/em&gt; leaves Unity’s selection unchanged and thus won’t effect other windows&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Event-driven Dialogs with node-based Editor</title>
   <link href="https://seldomu.github.io//2016/02/07/dialogEditor/"/>
   <updated>2016-02-07T00:00:00+01:00</updated>
   <id>https://seldomu.github.io//2016/02/07/dialogEditor</id>
   <content type="html">&lt;p&gt;This post covers the creation of a simple general purpose dialog system, including a visual Editor that makes it easy to use for even complex dialog graphs. It’s versatile: thanks to Unity’s event widget, you can hook up any code to the dialog buttons. Of course we won’t create a button for each dialog instance. You can also form any shape of dialog connections: chains, trees, loops, graphs. The project lives on &lt;a href=&quot;https://github.com/seldomU/EventDrivenDialog&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;data-setup&quot;&gt;Data Setup&lt;/h3&gt;

&lt;p&gt;Let’s define a dialog as a UI element that presents the player with some information and, optionally, a choice of replies. When the user selects a reply, there should be some effect on the game and the dialog UI should disappear. Translated to C# data types:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DialogItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MonoBehaviour&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DialogReply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;replies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;[Serializable]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DialogReply&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DialogItem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextDialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ButtonClickedEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;effect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The dialog and each reply get a &lt;code class=&quot;highlighter-rouge&quot;&gt;text&lt;/code&gt; field to present their information. As a visual improvement you could add fields for style, avatar image, positioning and such.
The reply class also has an &lt;code class=&quot;highlighter-rouge&quot;&gt;effect&lt;/code&gt; field, which holds all gamestate changes that should happen when this reply is picked.&lt;/p&gt;

&lt;p&gt;We could store a “open that dialog” action as part of the effect event, but we want to be able to visualize the connections between dialogs and inspecting the internals of a UnityEvent is hard. That’s why there’s an extra field for it, called &lt;code class=&quot;highlighter-rouge&quot;&gt;nextDialog&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now you can put &lt;code class=&quot;highlighter-rouge&quot;&gt;DialogItem&lt;/code&gt; components into empty GameObjects and fill them with content. This dialog turns another GameObject on/off:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seldomU/seldomu.github.io/master/assets/DialogInspect.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ui-setup&quot;&gt;UI Setup&lt;/h3&gt;

&lt;p&gt;The Dialog UI is minimal: a panel with a vertical layout group, containing one Text for the question and enough Buttons to cover the maximum number of replies we expect. I chose five.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seldomU/seldomu.github.io/master/assets/DialogPanel.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;hooking-up-data-and-ui&quot;&gt;Hooking up data and UI&lt;/h3&gt;

&lt;p&gt;We need a manager component that can be used by the game to show and hide dialogs. Showing a dialog involves activating the panel and populating the question text and reply buttons from a given DialogItem. For hiding the dialog, we’ll deactivate the panel. The full C# code is &lt;a href=&quot;https://github.com/seldomU/EventDrivenDialog/blob/master/Assets/Scripts/DialogManager.cs&quot;&gt;here&lt;/a&gt;. Make sure not to put the manager on the panel’s GameObject, or it will deactivate itself along with the panel. In the example project, the manager is attached to the Main Camera.&lt;/p&gt;

&lt;h3 id=&quot;testing&quot;&gt;Testing&lt;/h3&gt;

&lt;p&gt;Now we can feed DialogItems to the manager. The &lt;code class=&quot;highlighter-rouge&quot;&gt;DialogTester&lt;/code&gt; component, attached to the &lt;em&gt;Main&lt;/em&gt; scene’s Camera, opens dialogs with you press &lt;em&gt;A&lt;/em&gt; or &lt;em&gt;B&lt;/em&gt; and closes them when you press &lt;em&gt;C&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dialog A lets you toggle the camera background image.&lt;/li&gt;
  &lt;li&gt;Dialog B is a flowchart that helps the player to decide how to act in a hunger situation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;node-based-editing&quot;&gt;Node-based editing&lt;/h3&gt;

&lt;p&gt;For things like conversations, you need to link many DialogItems together. The bigger such a graph gets, the harder it is to maintain and understand their structure. This is where node-based editors shine, and the &lt;a href=&quot;http://forum.unity3d.com/threads/relationsinspector-reveal-structures-in-your-project-demo.382792/&quot;&gt;RelationsInspector&lt;/a&gt; lets us create one easily. We just need to supply a backend class, similar to Unity’s custom inspectors. Then we can select our backend in the RelationsInspector and drag DialogItems into its window. The backend’s main purpuse is to define what the graph nodes should represent, and how they are connected:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DialogBackend&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MinimalBackend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DialogItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Relation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DialogItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetRelations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DialogItem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reply&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextDialog&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Relation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DialogItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextDialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The full implementation also adds context menu items for manipulating the dialog graph, you can see it &lt;a href=&quot;https://github.com/seldomU/EventDrivenDialog/blob/master/Assets/Scripts/Editor/DialogBackend.cs&quot;&gt;here&lt;/a&gt;. It is commented out because it dependds on the RelationsInspector &lt;a href=&quot;https://www.assetstore.unity3d.com/en/#!/content/54884&quot;&gt;package&lt;/a&gt;. Once you install the package, you can un-comment the backend code and check out the flowchart dialog example from the main scene. It should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seldomU/seldomu.github.io/master/assets/DialogFlowChart.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Right-clicking on the nodes and arrows gives you access to the graph-manipulation options defined in the backend. Not all changes done outside the graph window will be reflected by the graph.. to update it, use the &lt;strong&gt;Rebuild&lt;/strong&gt; toolbar button. For more information about RelationInspector features, see the &lt;a href=&quot;https://github.com/seldomU/RIBackendUtil/wiki/RelationsInspector-Manual#using-the-ri&quot;&gt;manual&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That’s it, now you’re all set up for using dialogs in your projects.&lt;/p&gt;

</content>
 </entry>
 

</feed>
